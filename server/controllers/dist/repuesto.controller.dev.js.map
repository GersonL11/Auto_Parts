{"version":3,"sources":["repuesto.controller.js"],"names":["Repuesto","require","exports","crearRepuesto","req","res","repuesto","body","save","status","json","error","message","obtenerRepuestos","find","repuestos","obtenerRepuestoPorId","findById","params","id","actualizarRepuesto","imagen","undefined","findByIdAndUpdate","eliminarRepuesto","findByIdAndDelete","mensaje","cantidadPorFechaRegistro","aggregate","$group","_id","$dateToString","format","date","cantidad","$sum","$sort","datos","labels","map","d","valores"],"mappings":"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","sourcesContent":["const Repuesto = require('../models/Repuesto');\r\n\r\n// Crear repuesto\r\nexports.crearRepuesto = async (req, res) => {\r\n  try {\r\n    const repuesto = new Repuesto(req.body);\r\n    await repuesto.save();\r\n    res.status(201).json(repuesto);\r\n  } catch (err) {\r\n    res.status(400).json({ error: err.message });\r\n  }\r\n};\r\n\r\n// Obtener todos los repuestos\r\nexports.obtenerRepuestos = async (req, res) => {\r\n  const repuestos = await Repuesto.find();\r\n  res.json(repuestos);\r\n};\r\n\r\n// Obtener un repuesto por ID\r\nexports.obtenerRepuestoPorId = async (req, res) => {\r\n  try {\r\n    const repuesto = await Repuesto.findById(req.params.id);\r\n    if (!repuesto) return res.status(404).json({ error: 'Repuesto no encontrado' });\r\n    res.json(repuesto);\r\n  } catch (err) {\r\n    res.status(400).json({ error: err.message });\r\n  }\r\n};\r\n\r\n// Actualizar repuesto\r\nexports.actualizarRepuesto = async (req, res) => {\r\n  try {\r\n    if (req.body.imagen === '' || req.body.imagen === undefined || req.body.imagen === null) {\r\n      delete req.body.imagen;\r\n    }\r\n    const repuesto = await Repuesto.findByIdAndUpdate(req.params.id, req.body, { new: true });\r\n    if (!repuesto) return res.status(404).json({ error: 'Repuesto no encontrado' });\r\n    res.json(repuesto);\r\n  } catch (err) {\r\n    res.status(400).json({ error: err.message });\r\n  }\r\n};\r\n\r\n// Eliminar repuesto\r\nexports.eliminarRepuesto = async (req, res) => {\r\n  try {\r\n    const repuesto = await Repuesto.findByIdAndDelete(req.params.id);\r\n    if (!repuesto) return res.status(404).json({ error: 'Repuesto no encontrado' });\r\n    res.json({ mensaje: 'Repuesto eliminado' });\r\n  } catch (err) {\r\n    res.status(400).json({ error: err.message });\r\n  }\r\n};\r\n\r\n// Cantidad de repuestos por mes/aÃ±o de registro\r\nexports.cantidadPorFechaRegistro = async (req, res) => {\r\n  try {\r\n    const datos = await Repuesto.aggregate([\r\n      {\r\n        $group: {\r\n          _id: {\r\n            $dateToString: { format: \"%m/%Y\", date: \"$fechaRegistro\" }\r\n          },\r\n          cantidad: { $sum: 1 }\r\n        }\r\n      },\r\n      { $sort: { \"_id\": 1 } }\r\n    ]);\r\n    res.json({\r\n      labels: datos.map(d => d._id),\r\n      valores: datos.map(d => d.cantidad)\r\n    });\r\n  } catch (err) {\r\n    res.status(500).json({ error: err.message });\r\n  }\r\n};"],"file":"repuesto.controller.dev.js"}