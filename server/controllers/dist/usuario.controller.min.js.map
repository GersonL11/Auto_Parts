{"version":3,"sources":["usuario.controller.js"],"names":["Usuario","require","exports","crearUsuario","req","res","usuario","regeneratorRuntime","async","_context","prev","next","body","awrap","save","status","json","t0","error","message","stop","obtenerUsuarios","usuarios","_context2","find","sent","obtenerUsuarioPorId","_context3","findById","params","id","abrupt","actualizarUsuario","_context4","findByIdAndUpdate","new","eliminarUsuario","_context5","findByIdAndDelete","mensaje"],"mappings":"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","file":"usuario.controller.min.js","sourcesContent":["const Usuario = require('../models/Usuario');\r\n\r\n// Crear usuario\r\nexports.crearUsuario = async (req, res) => {\r\n  try {\r\n    const usuario = new Usuario(req.body);\r\n    await usuario.save();\r\n    res.status(201).json(usuario);\r\n  } catch (err) {\r\n    res.status(400).json({ error: err.message });\r\n  }\r\n};\r\n\r\n// Obtener todos los usuarios\r\nexports.obtenerUsuarios = async (req, res) => {\r\n  const usuarios = await Usuario.find();\r\n  res.json(usuarios);\r\n};\r\n\r\n// Obtener un usuario por ID\r\nexports.obtenerUsuarioPorId = async (req, res) => {\r\n  try {\r\n    const usuario = await Usuario.findById(req.params.id);\r\n    if (!usuario) return res.status(404).json({ error: 'Usuario no encontrado' });\r\n    res.json(usuario);\r\n  } catch (err) {\r\n    res.status(400).json({ error: err.message });\r\n  }\r\n};\r\n\r\n// Actualizar usuario\r\nexports.actualizarUsuario = async (req, res) => {\r\n  try {\r\n    const usuario = await Usuario.findByIdAndUpdate(req.params.id, req.body, { new: true });\r\n    if (!usuario) return res.status(404).json({ error: 'Usuario no encontrado' });\r\n    res.json(usuario);\r\n  } catch (err) {\r\n    res.status(400).json({ error: err.message });\r\n  }\r\n};\r\n\r\n// Eliminar usuario\r\nexports.eliminarUsuario = async (req, res) => {\r\n  try {\r\n    const usuario = await Usuario.findByIdAndDelete(req.params.id);\r\n    if (!usuario) return res.status(404).json({ error: 'Usuario no encontrado' });\r\n    res.json({ mensaje: 'Usuario eliminado' });\r\n  } catch (err) {\r\n    res.status(400).json({ error: err.message });\r\n  }\r\n};"]}