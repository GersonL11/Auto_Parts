{"version":3,"sources":["repuesto.controller.js"],"names":["Repuesto","require","exports","crearRepuesto","req","res","repuesto","regeneratorRuntime","async","_context","prev","next","body","awrap","save","status","json","t0","error","message","stop","obtenerRepuestos","repuestos","_context2","find","sent","obtenerRepuestoPorId","_context3","findById","params","id","abrupt","actualizarRepuesto","_context4","imagen","undefined","findByIdAndUpdate","new","eliminarRepuesto","_context5","findByIdAndDelete","mensaje","cantidadPorFechaRegistro","datos","_context6","aggregate","$group","_id","$dateToString","format","date","cantidad","$sum","$sort","map","d","valores"],"mappings":"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","file":"repuesto.controller.min.js","sourcesContent":["const Repuesto = require('../models/Repuesto');\r\n\r\n// Crear repuesto\r\nexports.crearRepuesto = async (req, res) => {\r\n  try {\r\n    const repuesto = new Repuesto(req.body);\r\n    await repuesto.save();\r\n    res.status(201).json(repuesto);\r\n  } catch (err) {\r\n    res.status(400).json({ error: err.message });\r\n  }\r\n};\r\n\r\n// Obtener todos los repuestos\r\nexports.obtenerRepuestos = async (req, res) => {\r\n  const repuestos = await Repuesto.find();\r\n  res.json(repuestos);\r\n};\r\n\r\n// Obtener un repuesto por ID\r\nexports.obtenerRepuestoPorId = async (req, res) => {\r\n  try {\r\n    const repuesto = await Repuesto.findById(req.params.id);\r\n    if (!repuesto) return res.status(404).json({ error: 'Repuesto no encontrado' });\r\n    res.json(repuesto);\r\n  } catch (err) {\r\n    res.status(400).json({ error: err.message });\r\n  }\r\n};\r\n\r\n// Actualizar repuesto\r\nexports.actualizarRepuesto = async (req, res) => {\r\n  try {\r\n    if (req.body.imagen === '' || req.body.imagen === undefined || req.body.imagen === null) {\r\n      delete req.body.imagen;\r\n    }\r\n    const repuesto = await Repuesto.findByIdAndUpdate(req.params.id, req.body, { new: true });\r\n    if (!repuesto) return res.status(404).json({ error: 'Repuesto no encontrado' });\r\n    res.json(repuesto);\r\n  } catch (err) {\r\n    res.status(400).json({ error: err.message });\r\n  }\r\n};\r\n\r\n// Eliminar repuesto\r\nexports.eliminarRepuesto = async (req, res) => {\r\n  try {\r\n    const repuesto = await Repuesto.findByIdAndDelete(req.params.id);\r\n    if (!repuesto) return res.status(404).json({ error: 'Repuesto no encontrado' });\r\n    res.json({ mensaje: 'Repuesto eliminado' });\r\n  } catch (err) {\r\n    res.status(400).json({ error: err.message });\r\n  }\r\n};\r\n\r\n// Cantidad de repuestos por mes/aÃ±o de registro\r\nexports.cantidadPorFechaRegistro = async (req, res) => {\r\n  try {\r\n    const datos = await Repuesto.aggregate([\r\n      {\r\n        $group: {\r\n          _id: {\r\n            $dateToString: { format: \"%m/%Y\", date: \"$fechaRegistro\" }\r\n          },\r\n          cantidad: { $sum: 1 }\r\n        }\r\n      },\r\n      { $sort: { \"_id\": 1 } }\r\n    ]);\r\n    res.json({\r\n      labels: datos.map(d => d._id),\r\n      valores: datos.map(d => d.cantidad)\r\n    });\r\n  } catch (err) {\r\n    res.status(500).json({ error: err.message });\r\n  }\r\n};"]}