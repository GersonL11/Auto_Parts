{"version":3,"sources":["venta.controller.js"],"names":["Venta","require","Repuesto","Movimiento","exports","VentaLeida","req","res","body","carrito","item","_id","crearVenta","status","json","findById","repuesto","error","concat","nombre","cantidad","findByIdAndUpdate","$inc","venta","save","create","tipo","fecha","Date","descripcion","marca","modelo","_context","t3","message","obtenerVentas","ventas","regeneratorRuntime","async","_context2","prev","next","awrap","find","sent","t0","stop","obtenerVentaPorId","_context3","params","id","abrupt","actualizarVenta","_context4","new","eliminarVenta","_context5","findByIdAndDelete","mensaje","marcarVentaLeida","_req$body","ventaId","adminId","_context6","findOneAndUpdate","leida","upsert","ok","obtenerVentasLeidasPorAdmin","leidas","_context7","query","select","map","l","ahora","anioActual","ventasPorMes","valores","_context8","getFullYear","aggregate","$match","$gte","$lte","$group","$month","$sum","Array","fill","forEach","obtenerVentasPorCliente","ventasPorCliente","_context9","$ifNull","total","$sort","$limit","labels","v"],"mappings":"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","file":"venta.controller.min.js","sourcesContent":["const Venta = require('../models/Venta');\r\nconst Repuesto = require('../models/Repuesto');\r\nconst VentaLeida = require('../models/VentaLeida');\r\nconst Movimiento = require('../models/Movimiento');\r\n\r\n// Crear venta\r\nexports.crearVenta = async (req, res) => {\r\n  try {\r\n    const carrito = req.body.carrito || [];\r\n    for (const item of carrito) {\r\n      if (!item._id) {\r\n        return res.status(400).json({ error: `Falta el _id del repuesto en el carrito` });\r\n      }\r\n      const repuesto = await Repuesto.findById(item._id);\r\n      if (!repuesto) {\r\n        return res.status(400).json({ error: `Repuesto no encontrado: ${item.nombre}` });\r\n      }\r\n      if (repuesto.cantidad < item.cantidad) {\r\n        return res.status(400).json({ error: `Stock insuficiente para: ${item.nombre}` });\r\n      }\r\n    }\r\n    // Si todo ok, actualizar stock\r\n    for (const item of carrito) {\r\n      await Repuesto.findByIdAndUpdate(\r\n        item._id,\r\n        { $inc: { cantidad: -item.cantidad } }\r\n      );\r\n    }\r\n    // Guardar la venta\r\n    const venta = new Venta(req.body);\r\n    await venta.save();\r\n\r\n    // --- NUEVO: Registrar movimiento de salida por cada producto vendido ---\r\n    for (const item of carrito) {\r\n      await Movimiento.create({\r\n        repuesto: item._id,\r\n        tipo: 'Salida',\r\n        cantidad: item.cantidad,\r\n        fecha: new Date(),\r\n        descripcion: `Venta de ${item.nombre} (${item.marca || ''} ${item.modelo || ''}) x${item.cantidad}`\r\n      });\r\n    }\r\n    // --- FIN NUEVO ---\r\n\r\n    res.status(201).json(venta);\r\n  } catch (err) {\r\n    res.status(400).json({ error: err.message });\r\n  }\r\n};\r\n\r\n// Obtener todas las ventas\r\nexports.obtenerVentas = async (req, res) => {\r\n  try {\r\n    const ventas = await Venta.find();\r\n    res.json(ventas);\r\n  } catch (err) {\r\n    res.status(500).json({ error: err.message });\r\n  }\r\n};\r\n\r\n// Obtener una venta por ID\r\nexports.obtenerVentaPorId = async (req, res) => {\r\n  try {\r\n    const venta = await Venta.findById(req.params.id);\r\n    if (!venta) return res.status(404).json({ error: 'Venta no encontrada' });\r\n    res.json(venta);\r\n  } catch (err) {\r\n    res.status(400).json({ error: err.message });\r\n  }\r\n};\r\n\r\n// Actualizar venta\r\nexports.actualizarVenta = async (req, res) => {\r\n  try {\r\n    const venta = await Venta.findByIdAndUpdate(req.params.id, req.body, { new: true });\r\n    if (!venta) return res.status(404).json({ error: 'Venta no encontrada' });\r\n    res.json(venta);\r\n  } catch (err) {\r\n    res.status(400).json({ error: err.message });\r\n  }\r\n};\r\n\r\n// Eliminar venta\r\nexports.eliminarVenta = async (req, res) => {\r\n  try {\r\n    const venta = await Venta.findByIdAndDelete(req.params.id);\r\n    if (!venta) return res.status(404).json({ error: 'Venta no encontrada' });\r\n    res.json({ mensaje: 'Venta eliminada' });\r\n  } catch (err) {\r\n    res.status(400).json({ error: err.message });\r\n  }\r\n};\r\n\r\n// Marcar una venta como leída por un admin\r\nexports.marcarVentaLeida = async (req, res) => {\r\n  try {\r\n    const { ventaId, adminId } = req.body;\r\n    if (!ventaId || !adminId) return res.status(400).json({ error: 'Faltan parámetros' });\r\n    await VentaLeida.findOneAndUpdate(\r\n      { ventaId, adminId },\r\n      { leida: true, fecha: new Date() },\r\n      { upsert: true, new: true }\r\n    );\r\n    res.json({ ok: true });\r\n  } catch (err) {\r\n    res.status(400).json({ error: err.message });\r\n  }\r\n};\r\n\r\n// Obtener IDs de ventas leídas por un admin\r\nexports.obtenerVentasLeidasPorAdmin = async (req, res) => {\r\n  try {\r\n    const { adminId } = req.query;\r\n    if (!adminId) return res.status(400).json({ error: 'Falta adminId' });\r\n    const leidas = await VentaLeida.find({ adminId, leida: true }).select('ventaId -_id');\r\n    res.json(leidas.map(l => l.ventaId));\r\n  } catch (err) {\r\n    res.status(400).json({ error: err.message });\r\n  }\r\n};\r\n\r\n// Obtener cantidad de ventas por mes (para gráfico)\r\nexports.obtenerVentasPorMes = async (req, res) => {\r\n  try {\r\n    const ahora = new Date();\r\n    const anioActual = ahora.getFullYear();\r\n    // Agrupa por mes y cuenta la cantidad de ventas del año actual\r\n    const ventasPorMes = await Venta.aggregate([\r\n      {\r\n        $match: {\r\n          fecha: {\r\n            $gte: new Date(`${anioActual}-01-01T00:00:00.000Z`),\r\n            $lte: new Date(`${anioActual}-12-31T23:59:59.999Z`)\r\n          }\r\n        }\r\n      },\r\n      {\r\n        $group: {\r\n          _id: { $month: \"$fecha\" },\r\n          cantidad: { $sum: 1 }\r\n        }\r\n      }\r\n    ]);\r\n    const valores = Array(12).fill(0);\r\n    ventasPorMes.forEach(item => {\r\n      valores[item._id - 1] = item.cantidad;\r\n    });\r\n    res.json({ valores });\r\n  } catch (err) {\r\n    res.status(500).json({ error: err.message });\r\n  }\r\n};\r\n\r\n// Total vendido por cliente (top 10, con nombre por defecto si está vacío)\r\nexports.obtenerVentasPorCliente = async (req, res) => {\r\n  try {\r\n    const ventasPorCliente = await Venta.aggregate([\r\n      {\r\n        $group: {\r\n          _id: { $ifNull: [\"$cliente\", \"Sin nombre\"] },\r\n          total: { $sum: \"$total\" }\r\n        }\r\n      },\r\n      { $sort: { total: -1 } },\r\n      { $limit: 10 }\r\n    ]);\r\n    res.json({\r\n      labels: ventasPorCliente.map(v => v._id || \"Sin nombre\"),\r\n      valores: ventasPorCliente.map(v => v.total)\r\n    });\r\n  } catch (err) {\r\n    res.status(500).json({ error: err.message });\r\n  }\r\n};"]}