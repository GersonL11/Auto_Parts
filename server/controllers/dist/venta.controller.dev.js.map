{"version":3,"sources":["venta.controller.js"],"names":["Venta","require","Repuesto","VentaLeida","Movimiento","exports","crearVenta","req","res","carrito","body","item","_id","status","json","error","findById","repuesto","nombre","cantidad","findByIdAndUpdate","$inc","venta","save","create","tipo","fecha","Date","descripcion","marca","modelo","message","obtenerVentas","find","ventas","obtenerVentaPorId","params","id","actualizarVenta","eliminarVenta","findByIdAndDelete","mensaje","marcarVentaLeida","ventaId","adminId","findOneAndUpdate","leida","upsert","ok","obtenerVentasLeidasPorAdmin","query","select","leidas","map","l","obtenerVentasPorMes","ahora","anioActual","getFullYear","aggregate","$match","$gte","$lte","$group","$month","$sum","ventasPorMes","valores","Array","fill","forEach","obtenerVentasPorCliente","$ifNull","total","$sort","$limit","ventasPorCliente","labels","v"],"mappings":"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","sourcesContent":["const Venta = require('../models/Venta');\r\nconst Repuesto = require('../models/Repuesto');\r\nconst VentaLeida = require('../models/VentaLeida');\r\nconst Movimiento = require('../models/Movimiento');\r\n\r\n// Crear venta\r\nexports.crearVenta = async (req, res) => {\r\n  try {\r\n    const carrito = req.body.carrito || [];\r\n    for (const item of carrito) {\r\n      if (!item._id) {\r\n        return res.status(400).json({ error: `Falta el _id del repuesto en el carrito` });\r\n      }\r\n      const repuesto = await Repuesto.findById(item._id);\r\n      if (!repuesto) {\r\n        return res.status(400).json({ error: `Repuesto no encontrado: ${item.nombre}` });\r\n      }\r\n      if (repuesto.cantidad < item.cantidad) {\r\n        return res.status(400).json({ error: `Stock insuficiente para: ${item.nombre}` });\r\n      }\r\n    }\r\n    // Si todo ok, actualizar stock\r\n    for (const item of carrito) {\r\n      await Repuesto.findByIdAndUpdate(\r\n        item._id,\r\n        { $inc: { cantidad: -item.cantidad } }\r\n      );\r\n    }\r\n    // Guardar la venta\r\n    const venta = new Venta(req.body);\r\n    await venta.save();\r\n\r\n    // --- NUEVO: Registrar movimiento de salida por cada producto vendido ---\r\n    for (const item of carrito) {\r\n      await Movimiento.create({\r\n        repuesto: item._id,\r\n        tipo: 'Salida',\r\n        cantidad: item.cantidad,\r\n        fecha: new Date(),\r\n        descripcion: `Venta de ${item.nombre} (${item.marca || ''} ${item.modelo || ''}) x${item.cantidad}`\r\n      });\r\n    }\r\n    // --- FIN NUEVO ---\r\n\r\n    res.status(201).json(venta);\r\n  } catch (err) {\r\n    res.status(400).json({ error: err.message });\r\n  }\r\n};\r\n\r\n// Obtener todas las ventas\r\nexports.obtenerVentas = async (req, res) => {\r\n  try {\r\n    const ventas = await Venta.find();\r\n    res.json(ventas);\r\n  } catch (err) {\r\n    res.status(500).json({ error: err.message });\r\n  }\r\n};\r\n\r\n// Obtener una venta por ID\r\nexports.obtenerVentaPorId = async (req, res) => {\r\n  try {\r\n    const venta = await Venta.findById(req.params.id);\r\n    if (!venta) return res.status(404).json({ error: 'Venta no encontrada' });\r\n    res.json(venta);\r\n  } catch (err) {\r\n    res.status(400).json({ error: err.message });\r\n  }\r\n};\r\n\r\n// Actualizar venta\r\nexports.actualizarVenta = async (req, res) => {\r\n  try {\r\n    const venta = await Venta.findByIdAndUpdate(req.params.id, req.body, { new: true });\r\n    if (!venta) return res.status(404).json({ error: 'Venta no encontrada' });\r\n    res.json(venta);\r\n  } catch (err) {\r\n    res.status(400).json({ error: err.message });\r\n  }\r\n};\r\n\r\n// Eliminar venta\r\nexports.eliminarVenta = async (req, res) => {\r\n  try {\r\n    const venta = await Venta.findByIdAndDelete(req.params.id);\r\n    if (!venta) return res.status(404).json({ error: 'Venta no encontrada' });\r\n    res.json({ mensaje: 'Venta eliminada' });\r\n  } catch (err) {\r\n    res.status(400).json({ error: err.message });\r\n  }\r\n};\r\n\r\n// Marcar una venta como leída por un admin\r\nexports.marcarVentaLeida = async (req, res) => {\r\n  try {\r\n    const { ventaId, adminId } = req.body;\r\n    if (!ventaId || !adminId) return res.status(400).json({ error: 'Faltan parámetros' });\r\n    await VentaLeida.findOneAndUpdate(\r\n      { ventaId, adminId },\r\n      { leida: true, fecha: new Date() },\r\n      { upsert: true, new: true }\r\n    );\r\n    res.json({ ok: true });\r\n  } catch (err) {\r\n    res.status(400).json({ error: err.message });\r\n  }\r\n};\r\n\r\n// Obtener IDs de ventas leídas por un admin\r\nexports.obtenerVentasLeidasPorAdmin = async (req, res) => {\r\n  try {\r\n    const { adminId } = req.query;\r\n    if (!adminId) return res.status(400).json({ error: 'Falta adminId' });\r\n    const leidas = await VentaLeida.find({ adminId, leida: true }).select('ventaId -_id');\r\n    res.json(leidas.map(l => l.ventaId));\r\n  } catch (err) {\r\n    res.status(400).json({ error: err.message });\r\n  }\r\n};\r\n\r\n// Obtener cantidad de ventas por mes (para gráfico)\r\nexports.obtenerVentasPorMes = async (req, res) => {\r\n  try {\r\n    const ahora = new Date();\r\n    const anioActual = ahora.getFullYear();\r\n    // Agrupa por mes y cuenta la cantidad de ventas del año actual\r\n    const ventasPorMes = await Venta.aggregate([\r\n      {\r\n        $match: {\r\n          fecha: {\r\n            $gte: new Date(`${anioActual}-01-01T00:00:00.000Z`),\r\n            $lte: new Date(`${anioActual}-12-31T23:59:59.999Z`)\r\n          }\r\n        }\r\n      },\r\n      {\r\n        $group: {\r\n          _id: { $month: \"$fecha\" },\r\n          cantidad: { $sum: 1 }\r\n        }\r\n      }\r\n    ]);\r\n    const valores = Array(12).fill(0);\r\n    ventasPorMes.forEach(item => {\r\n      valores[item._id - 1] = item.cantidad;\r\n    });\r\n    res.json({ valores });\r\n  } catch (err) {\r\n    res.status(500).json({ error: err.message });\r\n  }\r\n};\r\n\r\n// Total vendido por cliente (top 10, con nombre por defecto si está vacío)\r\nexports.obtenerVentasPorCliente = async (req, res) => {\r\n  try {\r\n    const ventasPorCliente = await Venta.aggregate([\r\n      {\r\n        $group: {\r\n          _id: { $ifNull: [\"$cliente\", \"Sin nombre\"] },\r\n          total: { $sum: \"$total\" }\r\n        }\r\n      },\r\n      { $sort: { total: -1 } },\r\n      { $limit: 10 }\r\n    ]);\r\n    res.json({\r\n      labels: ventasPorCliente.map(v => v._id || \"Sin nombre\"),\r\n      valores: ventasPorCliente.map(v => v.total)\r\n    });\r\n  } catch (err) {\r\n    res.status(500).json({ error: err.message });\r\n  }\r\n};"],"file":"venta.controller.dev.js"}